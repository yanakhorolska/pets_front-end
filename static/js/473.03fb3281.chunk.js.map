{"version":3,"file":"static/js/473.03fb3281.chunk.js","mappings":"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","sources":["components/UserAvatar/UserAvatar.jsx","components/UserDataItem/UserDataItem.jsx","components/UserData/UserData.jsx","components/LogoutButton/LogoutButton.jsx","pages/UserPage/UserPage.jsx"],"sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { getUserAvatarURL } from 'redux/selectors';\nimport { useUpdateUserAvatarMutation } from '../../redux/fetchUser';\nimport { useDispatch } from 'react-redux';\n// import { setUser } from 'redux/authSlice';\n// import { useDispatch } from 'react-redux';\nimport { setAvatarURL } from '../../redux/authSlice';\n\nconst UserAvatar = () => {\n  const dispatch = useDispatch();\n  const avatarURL = useSelector(getUserAvatarURL);\n\n  // const dispatch = useDispatch();\n  const [updateUserAvatar] = useUpdateUserAvatarMutation();\n\n  const handleAvatarChange = async event => {\n    try {\n      const file = event.target.files[0];\n      const newAvatarURL = await updateUserAvatar(file).unwrap();\n      dispatch(setAvatarURL(newAvatarURL.avatarURL));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <div>\n      <img src={avatarURL} alt=\"User\" />\n\n      <div>\n        <label htmlFor=\"avatar-upload\">Upload Avatar</label>\n        <input\n          name=\"avatar\"\n          id=\"avatar-upload\"\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={e => handleAvatarChange(e)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default UserAvatar;\n","import React from 'react'\nimport { Formik, Form, Field } from 'formik'\nimport { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useUpdateUserMutation } from '../../redux/fetchUser';\nimport { setUser } from 'redux/authSlice';\nimport { getToken } from 'redux/selectors';\n\nconst UserDataItem = ({ initialValues, name, value }) => {\n  const [disabled, setDisabled] = useState(true);\n  \n  const token = useSelector(getToken)\n  const dispatch = useDispatch();\n\n  const [updateUser] = useUpdateUserMutation();\n\n  const handleSubmit = async values => {\n    try {\n      if (!disabled);\n    const user = await updateUser(token).unwrap();\n    dispatch(setUser(user));\n    }\n    catch (error) {\n      console.log(error)\n    }\n    \n  };\n  \n  return (\n    <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n      <Form>\n        <label>{name}: </label>\n        <Field type=\"text\" name={name} disabled={disabled} ></Field>\n        <button type=\"submit\" disabled={disabled}>Submit</button>\n        <button type=\"button\" onClick={() => setDisabled(!disabled)} >Edit</button>\n      </Form>\n      \n</Formik>\n    \n  )\n}\n\nexport default UserDataItem","import React from 'react'\nimport UserAvatar from \"../UserAvatar/UserAvatar\"\nimport UserDataItem from 'components/UserDataItem/UserDataItem'\nimport { getUser } from 'redux/selectors';\nimport { useSelector } from 'react-redux';\n\nconst UserData = () => {\n  const user = useSelector(getUser)\n  \n  console.log(\"USER IN USERState\", user)\n\n  return (\n      <div>\n          <p>My Information</p>\n      <UserAvatar />\n      <UserDataItem initialValues={{ name: user.name }} name=\"name\" value={user.name} />\n      <UserDataItem initialValues={{ email: user.email }} name=\"email\" value={user.email} />\n      <UserDataItem initialValues={{ birthday: user.birthday }} name=\"birthday\" value={user.birthday} />\n      <UserDataItem initialValues={{ phone: user.city }} name=\"city\" value={user.city} />\n      <UserDataItem initialValues={{ phone: user.phone }} name=\"phone\" value={user.phone} />\n    </div>\n  )\n}\n\nexport default UserData","import { useLogOutMutation } from '../../redux/fetchUser'\nimport {setLogoutUser} from '../../redux/authSlice'\n\nimport React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getToken } from 'redux/selectors';\n\nfunction LogoutButton() {\n    const token = useSelector(getToken)\n    const [logout, { isLoading }] = useLogOutMutation(token);\n    const dispatch = useDispatch()\n\n  const handleLogoutClick = () => {\n      logout(token);\n      dispatch(setLogoutUser())\n      \n  };\n\n  return (\n    <button onClick={handleLogoutClick} disabled={isLoading}>\n      Logout\n    </button>\n  );\n}\n\nexport default LogoutButton","import { useSelector, useDispatch } from 'react-redux';\nimport { getToken} from '../../redux/selectors';\nimport { useGetUserQuery } from '../../redux/authApi';\n// import {useGetCurrentUserQuery} from '../../redux/fetchUser'\n// import{useLogOutMutation} from '../../redux/fetchUser'\nimport { setUser } from '../../redux/authSlice';\nimport { useEffect } from 'react';\nimport UserData from 'components/UserData/UserData';\nimport LogoutButton from \"components/LogoutButton/LogoutButton\"\n// import {PetsData} from \"components/PetsData/\"\n\nconst UserPage = () => {\n  const token = useSelector(getToken);\n//  console.log(token)\n  const dispatch = useDispatch();\n  \n  const { data, isLoading } = useGetUserQuery(token);\n  \n\n const user = {...data, token}\nconsole.log(\"data from back\", user)\n  useEffect(() => {\n    if (!isLoading) {\n      dispatch(setUser(user), []);\n    }\n  });\n  // const currentUser = useSelector(getUser);\n  // console.log('CurrentUser from userState', currentUser);\n\n    return (\n    <div>\n      <UserData />\n      <LogoutButton />\n      {/* <PetsData /> */}\n    </div>\n  );\n};\n\nexport default UserPage;"],"names":["dispatch","useDispatch","avatarURL","useSelector","getUserAvatarURL","useUpdateUserAvatarMutation","updateUserAvatar","handleAvatarChange","event","file","target","files","unwrap","newAvatarURL","setAvatarURL","console","log","src","alt","htmlFor","name","id","type","accept","onChange","e","initialValues","value","useState","disabled","setDisabled","token","getToken","useUpdateUserMutation","updateUser","handleSubmit","values","user","setUser","onSubmit","onClick","getUser","email","birthday","phone","city","useLogOutMutation","logout","isLoading","setLogoutUser","useGetUserQuery","data","useEffect"],"sourceRoot":""}