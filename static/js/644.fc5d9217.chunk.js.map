{"version":3,"file":"static/js/644.fc5d9217.chunk.js","mappings":"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","sources":["components/LoginForm/LoginFormStyled.js","components/LoginForm/LoginForm.jsx","components/RegisterForm/RegisterForm.jsx","components/AuthForm/AuthFormStyled.js","components/AuthForm/AuthForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const AuthError = styled.p`\n  height: 20px;\n  text-align: left;\n  font-size: 10px;\n  line-height: 12px;\n  color: #f59256;\n  letter-spacing: 0.04em;\n  padding: 5px 15px;\n`;\n\nexport const AuthErrorLast = styled.p`\n  height: 20px;\n  text-align: left;\n  font-size: 10px;\n  line-height: 12px;\n  color: #f59256;\n  letter-spacing: 0.04em;\n  padding: 5px 15px;\n  margin-bottom: 20px;\n`;\n\nexport const AuthInput = styled.input`\n  width: 100%;\n  font-size: 14px;\n  line-height: 1.36;\n  letter-spacing: 0.04em;\n  background-color: #fdf7f2;\n  border: 1px solid rgba(245, 146, 86, 0.5);\n  border-radius: 40px;\n  outline: none;\n  padding: 9px 14px 10px;\n\n  @media (min-width: 768px) {\n    font-size: 18px;\n    line-height: 1.39;\n    padding: 13px 32px 12px;\n  }\n`;\n\nexport const AuthButton = styled.button`\n  display: block;\n  width: 100%;\n  font-family: 'Manrope Medium';\n  font-size: 20px;\n  line-height: 1.35;\n  letter-spacing: 0.04em;\n\n  border-radius: 40px;\n  cursor: pointer;\n\n  padding-top: 6px;\n  padding-bottom: 5px;\n\n  background-color: ${props => (props.page === 1 ? '#f59256' : '#fff')};\n  color: ${props => (props.page === 1 ? '#fff' : '#000')};\n  border: ${props => (props.page === 1 ? 'none' : '2px solid #f59256')};\n  margin-bottom: ${props => (props.last ? '40px' : '16px')};\n`;\n","import { useDispatch} from 'react-redux';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { useLogInUserMutation } from 'redux/authApi';\nimport { setCredentials } from 'redux/authSlice';\nimport { AuthError, AuthErrorLast, AuthInput, AuthButton } from \"./LoginFormStyled\"\n\nconst LoginForm = () => {\n  const [loginUser] = useLogInUserMutation();\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n    },\n\n    validationSchema: Yup.object({\n      email: Yup.string()\n        .email('Invalid email address')\n        .required('This is a required field'),\n      password: Yup.string()\n        .min(7, 'Password must include more tnan 7 characters')\n        .max(32, 'Password must be less tnan 32 characters')\n        .required('This is a required field'),\n    }),\n  });\n\n  const { email, password } = formik.values;\n  const { email: emailError, password: passwordError } = formik.errors;\n\n  const onFormSubmit = async e => {\n    e.preventDefault();\n\n    if (email === '' || password === '') {\n      alert('Input all required fields');\n      return;\n    }\n    if (passwordError || emailError) {\n      alert('Input all fields in the necessary format');\n      return;\n    }\n\n    try {\n      const user = await loginUser({ email, password }).unwrap();\n      dispatch(setCredentials(user));\n    } catch (error) {\n      alert(error.data.message);\n    }\n  };\n\n  return (\n    <form onSubmit={onFormSubmit}>\n      <AuthInput\n        type=\"email\"\n        name=\"email\"\n        placeholder=\"Email\"\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        value={email}\n      />\n      <AuthError>\n        {formik.touched.email && emailError && emailError}\n        </AuthError>\n      <AuthInput\n        type=\"password\"\n        name=\"password\"\n        placeholder=\"Password\"\n        onChange={event => {\n          formik.setFieldValue('password', event.target.value.trim());\n        }}\n        onBlur={formik.handleBlur}\n        value={password}\n      />\n      <AuthErrorLast>\n        {formik.touched.password && passwordError && passwordError}\n      </AuthErrorLast>\n      <AuthButton type=\"submit\" page={1} last={true}>\n        Login\n        </AuthButton>\n      </form>\n  );\n};\n\nexport default LoginForm;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { useLogInUserMutation, useRegisterUserMutation } from 'redux/authApi';\nimport { setCredentials } from 'redux/authSlice';\nimport { AuthError, AuthErrorLast, AuthInput, AuthButton } from \"../LoginForm/LoginFormStyled\"\nconst RegisterForm = () => {\n  const [page, setPage] = useState(1);\n  const [registerUser] = useRegisterUserMutation();\n  const [loginUser] = useLogInUserMutation();\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      confirm_password: '',\n      name: '',\n      city: '',\n      phone: '',\n    },\n\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n    },\n\n    validationSchema: Yup.object({\n      email: Yup.string()\n        .email('Invalid email address')\n        .required('This is a required field'),\n      password: Yup.string()\n        .min(7, 'Password must include more tnan 7 characters')\n        .max(32, 'Password must be less tnan 32 characters')\n        .required('This is a required field'),\n      confirm_password: Yup.string()\n        .oneOf(\n          [Yup.ref('password'), null],\n          \"Password and confirm password don't match\"\n        )\n        .required('This is a required field'),\n      name: Yup.string()\n        .matches(\n          /[A-Za-z]+/,\n          'Please, enter only latin letters'\n        )\n        .required('This is a required field'),\n      city: Yup.string()\n        .matches(\n          /[A-Za-z]+, [A-Za-z]+/,\n          'Please, enter the data in format \"region, city\"'\n        )\n        .required('This is a required field'),\n      phone: Yup.string()\n        .matches(\n          /^\\+380\\d{9}/,\n          'Please, enter the phone number in the following way: +380XXXXXXXXX'\n        )\n        .length(13, 'Phone must include 13 characters')\n        .required('This is a required field'),\n    }),\n  });\n\n  let { email, password, confirm_password, name, city, phone } = formik.values;\n  const {\n    email: emailError,\n    password: passwordError,\n    confirm_password: confirmError,\n    name: nameError,\n    city: cityError,\n    phone: phoneError,\n  } = formik.errors;\n\n  const onPageChange = async () => {\n    if (page === 1) {\n      if (email === '' || password === '' || confirm_password === '') {\n        alert('Input all required fields');\n        return;\n      }\n      if (passwordError || confirmError || emailError) {\n        alert('Input all fields in the necessary format');\n        return;\n      }\n      setPage(2);\n      return;\n    }\n    setPage(1);\n  };\n\n  const onFormSubmit = async e => {\n    e.preventDefault();\n    if (name === '' || city === '' || phone === '') {\n      alert('Input all required fields');\n      return;\n    }\n    if (nameError || cityError || phoneError) {\n      alert('Input all fields in the necessary format');\n      return;\n    }\n\n    try {\n      await registerUser({\n        email,\n        password,\n        name,\n        city,\n        phone,\n      }).unwrap();\n      const user = await loginUser({ email, password }).unwrap();\n      dispatch(setCredentials(user));\n    } catch (error) {\n      alert(error.data.message);\n    }\n  };\n\n  return (\n    <>\n      <form onSubmit={onFormSubmit}>\n        {page === 1 && (\n          <>\n            <AuthInput\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Email\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              value={email}\n            />\n            <AuthError>\n              {formik.touched.email && emailError && emailError}\n            </AuthError>\n            <AuthInput\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Password\"\n              onChange={event => {\n                formik.setFieldValue('password', event.target.value.trim());\n              }}\n              onBlur={formik.handleBlur}\n              value={password}\n            />\n            <AuthError>\n              {formik.touched.password && passwordError && passwordError}\n            </AuthError>\n            <AuthInput\n              type=\"password\"\n              name=\"confirm_password\"\n              placeholder=\"Confirm Password\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              value={confirm_password}\n            />\n            <AuthErrorLast>\n              {formik.touched.confirm_password && confirmError && confirmError}\n            </AuthErrorLast>\n          </>\n        )}\n        {page === 2 && (\n          <>\n            <AuthInput\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Name\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              value={name}\n            />\n            <AuthError>\n              {formik.touched.name && nameError && nameError}\n            </AuthError>\n            <AuthInput\n              type=\"text\"\n              name=\"city\"\n              placeholder=\"City\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              value={city}\n            />\n            <AuthError>\n              {formik.touched.city && cityError && cityError}\n            </AuthError>\n            <AuthInput\n              type=\"tel\"\n              name=\"phone\"\n              placeholder=\"Mobile phone\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              value={phone}\n            />\n            <AuthErrorLast>\n              {formik.touched.phone && phoneError && phoneError}\n            </AuthErrorLast>\n            <AuthButton page = {1} last={false}\n              type=\"submit\"\n            >\n              Register\n            </AuthButton>\n          </>\n        )}\n        <AuthButton page={page} last={true}\n          type=\"button\"\n          onClick={onPageChange}\n        >\n          {page === 1 ? 'Next' : 'Back'}\n        </AuthButton>\n      </form>\n    </>\n  );\n};\n\nexport default RegisterForm;\n","import styled from 'styled-components';\n\nexport const AuthContainer = styled.div`\n  width: 280px;\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  text-align: center;\n\n  @media (min-width: 768px) {\n    width: 608px;\n    top: 114px;\n    background-color: #fff;\n    box-shadow: 7px 4px 14px rgba(0, 0, 0, 0.11);\n    border-radius: 40px;\n    padding: 60px 80px;\n  }\n\n  @media (min-width: 1280px) {\n    width: 618px;\n  }\n`;\n\nexport const AuthTitle = styled.h2`\n  font-family: 'Manrope', sans-serif;\n  font-weight: 700;\n  font-size: 24px;\n  line-height: 1.38;\n\n  letter-spacing: 0.04em;\n  color: #111111;\n  margin-bottom: 40px;\n\n  @media (min-width: 768px) {\n    font-family: 'Manrope', sans-serif;\n    font-weight: 500;\n    font-size: 36px;\n    line-height: 1.36;\n  }\n`;\n\nexport const AuthQuestion = styled.p`\n  display: inline-block;\n  font-size: 12px;\n  line-height: 1.33;\n  letter-spacing: 0.04em;\n  color: rgba(17, 17, 17, 0.6);\n`;\n\nexport const AuthLink = styled('Link')`\n  display: inline-block;\n  font-size: 12px;\n  line-height: 1.33;\n  letter-spacing: 0.04em;\n  text-decoration-line: underline;\n  color: #3091eb;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport LoginForm from 'components/LoginForm/LoginForm';\nimport RegisterForm from 'components/RegisterForm/RegisterForm';\nimport {\n  AuthContainer,\n  AuthTitle,\n  AuthQuestion,\n  AuthLink,\n} from './AuthFormStyled';\n\nconst AuthForm = ({ title }) => {\n  const { pathname } = useLocation();\n\n  return (\n    <AuthContainer>\n      <AuthTitle>{title}</AuthTitle>\n      {pathname === '/login' && <LoginForm />}\n      {pathname === '/register' && <RegisterForm />}\n      <AuthQuestion>\n          {pathname === '/register'\n            ? 'Already have an account?'\n            : \"Don't have an account?\"}\n          &nbsp;\n      </AuthQuestion>\n      <AuthLink>\n        <Link to={pathname === '/register' ? '/login' : '/register'}>\n          {pathname === '/register' ? 'Login' : 'Register'}\n        </Link>\n      </AuthLink>\n    </AuthContainer>\n  );\n};\n\nexport default AuthForm;\n","import AuthForm from 'components/AuthForm/AuthForm';\n// import s from './RegisterPage.module.scss';\n\nconst RegisterPage = () => {\n  return (\n    <div\n      // className={s.container}\n    >\n      <AuthForm\n        title='Registration'\n      />\n    </div>\n  );\n};\n\nexport default RegisterPage;"],"names":["AuthError","styled","AuthErrorLast","AuthInput","AuthButton","props","page","last","useLogInUserMutation","loginUser","dispatch","useDispatch","formik","useFormik","initialValues","email","password","onSubmit","values","alert","JSON","stringify","validationSchema","Yup","required","min","max","errors","emailError","passwordError","onFormSubmit","e","preventDefault","unwrap","user","setCredentials","data","message","type","name","placeholder","onChange","handleChange","onBlur","handleBlur","value","touched","event","setFieldValue","target","trim","useState","setPage","useRegisterUserMutation","registerUser","confirm_password","city","phone","oneOf","matches","length","confirmError","nameError","cityError","phoneError","onPageChange","onClick","AuthContainer","AuthTitle","AuthQuestion","AuthLink","title","pathname","useLocation","to","AuthForm"],"sourceRoot":""}